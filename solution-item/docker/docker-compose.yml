name: 'pcparts.container'

networks:
  pcparts_network:
    name: "pcparts_network"
    driver: bridge

services:
  pcparts.api:
    container_name: pcparts.api
    image: ${DOCKER_REGISTRY-}pcpartsapi
    build:
      context: ../../src
      dockerfile: PCParts.API/Dockerfile
    depends_on:
       pcparts.database:
         condition: service_healthy
    networks:
      - pcparts_network 
    ports:
      - "8080:8080"
      - "8081:8081"
    expose:
       - "8080"
       - "8081"
    environment:
    - ASPNETCORE_ENVIRONMENT=Development
    env_file:
     - ../env/backend.env
    

  pcparts.database:
    image: postgres:latest
    container_name: "pcparts.database"
    volumes:
    -  ../../.containers/api-db:/var/lib/postgresql/data 
    ports:
    - "5431:5432"
    env_file:
      - ../env/backend.env
    networks:
      - pcparts_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  pcparts.notifications:
    container_name: pcparts.notification
    image: pcparts-consumer
    build:
      context: ../../src
      dockerfile: PCParts.Notifications/Dockerfile
    networks:
      - pcparts_network 

  rabbitMq: 
    image: rabbitmq:3-management
    container_name: rabbitMq
    restart: always
    networks:
      - pcparts_network
    ports:
      - "5672:5672"     
      - "15672:15672"
    env_file:
     - ../env/backend.env
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    env_file:
     - ../env/backend.env
    ports:
     - '3000:3000'
    volumes: 
      - grafana-storage:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../grafana/loki-config.yaml:/etc/loki/local-config.yaml
  

volumes:
  rabbitmq-data:
  grafana-storage:
    
