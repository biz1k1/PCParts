name: 'pcparts.container'

networks:
  pcparts_network:
    name: "pcparts_network"
    driver: bridge

services:
  pcparts.api:
    container_name: pcparts.api
    image: ${DOCKER_REGISTRY-}pcpartsapi
    build:
      context: ../../src
      dockerfile: PCParts.API/Dockerfile
    depends_on:
       pcparts.database:
         condition: service_healthy
       redis:
         condition: service_healthy
       rabbitMq:
         condition: service_healthy
    networks:
      - pcparts_network 
    ports:
      - "8080:8080"
      - "8081:8081"
    expose:
       - "8080"
       - "8081"
    environment:
    - ASPNETCORE_ENVIRONMENT=Development
    env_file:
     - ../env/backend.env
    

  pcparts.database:
    image: postgres:latest
    container_name: "pcparts.database"
    volumes:
    -  ../../.containers/api-db:/var/lib/postgresql/data 
    ports:
    - "5431:5432"
    env_file:
      - ../env/backend.env
    networks:
      - pcparts_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  pcparts.notifications:
    container_name: pcparts.notification
    image: pcparts-consumer
    build:
      context: ../../src
      dockerfile: PCParts.Notifications/Dockerfile
    networks:
      - pcparts_network 

  rabbitMq: 
    image: rabbitmq:3-management
    container_name: pcparts.rabbitMq
    restart: always
    networks:
      - pcparts_network
    ports:
      - "5672:5672"     
      - "15672:15672"
    env_file:
     - ../env/backend.env
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  grafana:
    image: grafana/grafana
    container_name: pcparts.grafana
    restart: unless-stopped
    env_file:
     - ../env/backend.env
    ports:
     - '3000:3000'
    volumes: 
      - grafana-storage:/var/lib/grafana

  loki:
    image: grafana/loki:latest
    container_name: pcparts.loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../grafana/loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: pcparts.prometheus
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: always

  redis:
      image: redis:7
      container_name: pcparts.redis
      networks:
        - pcparts_network
      ports:
        - "6379:6379"
      command: >
        redis-server --port 6379 --appendonly yes
      volumes:
        - redis_data:/data
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5
   
volumes:
  rabbitmq-data:
  grafana-storage:
  redis_data:
    
